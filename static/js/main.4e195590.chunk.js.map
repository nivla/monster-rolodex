{"version":3,"sources":["components/card/card.jsx","components/card-list/card_list.jsx","components/search_box/search_box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","onChange","type","initialMonsters","App","useState","setMonsters","searchField","setSearchField","filteredMonsters","filter","toLowerCase","includes","useEffect","fetch","then","response","json","users","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGe,SAASA,EAAKC,GAC3B,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,WCGTC,MAVf,SAAkBR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAACL,EAAD,CAAuBK,QAASA,GAArBA,EAAQC,U,KCUZM,MAbf,YAA+C,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SAChC,OACE,8BACE,uBACEC,KAAK,SACLF,YAAaA,EACbC,SAAUA,EACVZ,UAAU,cCNZc,EAAkB,CACtB,CACET,KAAM,aACND,GAAI,GAEN,CACEC,KAAM,UACND,GAAI,GAEN,CACEC,KAAM,SACND,GAAI,IA+BOW,MA3Bf,WAAgB,IAAD,EACmBC,mBAASF,GAD5B,mBACNN,EADM,KACIS,EADJ,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,KAIPC,EAAmBZ,EAASa,QAAO,SAAClB,GAAD,OACvCA,EAAQE,KAAKiB,cAAcC,SAASL,EAAYI,kBAalD,OAVAE,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWZ,EAAYY,QAC9B,IAOD,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWY,SAPM,SAACkB,GACpBX,EAAeW,EAAEC,OAAOC,UAOtB,cAAC,EAAD,CAAUxB,SAAUY,QC/BXa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4e195590.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\nexport default function Card(props) {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./card_list.styles.css\";\nimport Card from \"../card/card\";\n\nfunction CardList(props) {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from \"react\";\nimport \"./search_box.styles.css\";\n\nimport \"./search_box.styles.css\";\n\nfunction SearchBox({ placeholder, onChange }) {\n  return (\n    <div>\n      <input\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={onChange}\n        className=\"search\"\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\n\nimport CardList from \"./components/card-list/card_list\";\nimport SearchBox from \"./components/search_box/search_box\";\n\nconst initialMonsters = [\n  {\n    name: \"Frankstein\",\n    id: 1,\n  },\n  {\n    name: \"Dracula\",\n    id: 2,\n  },\n  {\n    name: \"Zombie\",\n    id: 3,\n  },\n];\n\nfunction App() {\n  const [monsters, setMonsters] = useState(initialMonsters);\n  const [searchField, setSearchField] = useState(\"\");\n\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => setMonsters(users));\n  }, []);\n\n  const handlechange = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox onChange={handlechange} />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}